/* 1. How many transactions were completed during each marketing campaign? */

select campaign_name, count(transaction_id) as no_of_transactions
from transactions t
join marketing_campaigns m on t.purchase_date between m.start_date and m.end_date
	and t.product_id = m.product_id
group by campaign_name;

/* 2. Which product had the highest sales quantity? */

with cte as
(select t.product_id, product_name, sum(quantity) as total_quantity_sold
from transactions t
join sustainable_clothing s on t.product_id = s.product_id
group by 1,2
order by total_quantity_sold desc)

select * 
from cte
where total_quantity_sold in (select max(total_quantity_sold) from cte); 

/* 3. What is the total revenue generated from each marketing campaign? */

select campaign_name, round(sum(quantity*price),2) as total_revenue
from transactions t
join sustainable_clothing s on t.product_id = s.product_id
join marketing_campaigns m on t.purchase_date between m.start_date and end_date
	and t.product_id = m.product_id
group by campaign_name;

/* 4. What is the top-selling product category based on the total revenue generated? */

with cte as
(select category, round(sum(quantity*price),2) as total_revenue
from transactions t
join sustainable_clothing s on t.product_id = s.product_id
group by 1
order by total_revenue desc)

select *
from cte
where total_revenue in (select max(total_revenue) from cte); 

/* 5. Which products had a higher quantity sold compared to the average quantity sold? */

select t.product_id, product_name, quantity
from transactions t
join sustainable_clothing s on t.product_id = s.product_id
where quantity > (select avg(quantity) from transactions);

/* 6. What is the average revenue generated per day during the marketing campaigns? */

select purchase_date, round(avg(quantity*price), 2) as avg_revenue
from transactions t
join sustainable_clothing s on t.product_id=s.product_id
join marketing_campaigns m on t.purchase_date between m.start_date and m.end_date
	and t.product_id=m.product_id
group by purchase_date;

/* 7. What is the percentage contribution of each product to the total revenue? */

with cte as
(select round(sum(quantity*price),2) as total_revenue
from transactions t
join sustainable_clothing s on t.product_id=s.product_id),

cte2 as
(select product_name, round(sum(quantity*price),2) as total_prod_revenue
from transactions t
join sustainable_clothing s on t.product_id=s.product_id
group by product_name)

select product_name, 
	round((total_prod_revenue*100)/total_revenue ,2) as pct_contri
from cte, cte2;

/* 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns */

with cte as
(select avg(quantity) as avg_qty_during_campaign
from transactions t
join sustainable_clothing s on t.product_id=s.product_id
join marketing_campaigns m on t.purchase_date between m.start_date and m.end_date
	and t.product_id=m.product_id),

cte2 as
(select avg(quantity) as total_avg_qty
from transactions t
join sustainable_clothing s on t.product_id=s.product_id)

select total_avg_qty, avg_qty_during_campaign, 
	total_avg_qty-avg_qty_during_campaign as avg_qty_outside_campaign
from cte, cte2;     

/* 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns */

with cte as
(select round(sum(quantity*price),2) as tot_rev_during_campaign
from transactions t
join sustainable_clothing s on t.product_id=s.product_id
join marketing_campaigns m on t.purchase_date between m.start_date and m.end_date
	and t.product_id=m.product_id),

cte2 as
(select round(sum(quantity*price),2) as total_revenue
from transactions t
join sustainable_clothing s on t.product_id=s.product_id)

select total_revenue, tot_rev_during_campaign, 
	total_revenue-tot_rev_during_campaign as tot_rev_outside_campaign
from cte, cte2;

/* 10. Rank the products by their average daily quantity sold */

with cte as
(select product_name, avg(quantity) as avg_sold_qty 
from transactions t
join sustainable_clothing s on t.product_id=s.product_id 
group by 1)

select product_name, avg_sold_qty, 
	dense_rank() over(order by avg_sold_qty) as rank_avg 
from cte;
